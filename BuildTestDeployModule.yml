- stage: Build
  jobs:
  - job: Job1
    displayName: Compile Module
    pool:
      name: Hosted VS2017

    steps:
    - checkout: self
      submodules: true

    - powershell: . ./build.ps1
      displayName: Compile Module

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Compiled Module'
      inputs:
        PathtoPublish: BuildOutput
        ArtifactName: BuildOutput

- stage: Test
  jobs:
  - job: Job2
    displayName: Test Windows (PSv5)
    condition: succeeded()
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - powershell: . ./build.ps1 -Task Test
      displayName: Test Module

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: succeededOrFailed()

  - job: Job3
    displayName: Test Ubuntu
    condition: succeeded()
    pool:
      name: Hosted Ubuntu 1604

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: succeededOrFailed()

  - job: Job4
    displayName: Test macOS
    condition: succeeded()
    pool:
      name: Hosted macOS

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: succeededOrFailed()

  - job: Job5
    displayName: Test Windows (PSv6)
    condition: succeeded()
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: succeededOrFailed()

  - job: Job6
    displayName: Test Docker
    condition: succeeded()
    pool:
      name: Hosted Ubuntu 1604

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - pwsh: docker build . -t module-img -f ./Dockerfile
      displayName: Build container image

    - pwsh: docker run --name module module-img:latest
      displayName: Test Module in Container

    - pwsh: docker cp module:/Source/BuildOutput/TestResults.xml BuildOutput/TestResults_Docker.xml
      displayName: Copy container test results

    - pwsh: docker rm module
      displayName: Clean up container

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      condition: succeededOrFailed()
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'

- stage: Deploy
  jobs:
  - job: Job7
    displayName: Deploy Module
    condition: and(succeeded(), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      condition: startsWith(variables['Build.SourceVersionMessage'], '!deploy')
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - powershell: . ./build.ps1 -Task Deploy
      displayName: Deploy to PowerShell Gallery
      condition: startsWith(variables['Build.SourceVersionMessage'], '!deploy')
      env:
        GitHubPAT: $(GitHub.PAT)
        NuGetApiKey: $(NuGetApiKey)
        TwitterAccessSecret: $(Twitter.AccessSecret)
        TwitterAccessToken: $(Twitter.AccessToken)
        TwitterConsumerKey: $(Twitter.ConsumerKey)
        TwitterConsumerSecret: $(Twitter.ConsumerSecret)

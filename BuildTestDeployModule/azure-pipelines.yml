parameters:
  MkDocs: ''
  GitUrl: ''

stages:
- stage: Build
  jobs:
  - job: Job1
    displayName: Compile Module
    pool:
      name: Hosted VS2017

    steps:
    - checkout: self
      submodules: recursive

    - powershell: . ./build.ps1
      displayName: Compile Module

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Compiled Module'
      inputs:
        PathtoPublish: BuildOutput
        ArtifactName: BuildOutput

- stage: Test
  jobs:
  - job: Job2
    displayName: Test Windows (PSv5)
    condition: succeeded()
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - powershell: . ./build.ps1 -Task Test
      displayName: Test Module
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))

  - job: Job3
    displayName: Test Ubuntu
    condition: succeeded()
    pool:
      name: Hosted Ubuntu 1604

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))

  - job: Job4
    displayName: Test macOS
    condition: succeeded()
    pool:
      name: Hosted macOS

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))

  - job: Job5
    displayName: Test Windows (PSv6)
    condition: succeeded()
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))

  - job: Job6
    displayName: Test Docker (pwsh-preview)
    condition: succeeded()
    pool:
      name: Hosted Ubuntu 1604

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - pwsh: |
        if (-not (Test-Path Dockerfile)) {
            Write-Host "Pulling Dockerfile from template repo"
            Invoke-RestMethod 'https://raw.githubusercontent.com/SCRT-HQ/AzurePipelineTemplates/master/BuildTestDeployModule/Dockerfile' | Set-Content Dockerfile -Force
        }
        else {
            Write-Host "Dockerfile already exists in current repo! Contents:`n"
            Get-Content Dockerfile
        }
      displayName: Create Dockerfile

    - script: docker build . -t test -f Dockerfile
      displayName: Build container image
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - script: docker run --name test test
      displayName: Test Module in Container
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - script: docker cp test:/source/BuildOutput/TestResults.xml BuildOutput/TestResults.xml
      displayName: Copy container test results
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - script: docker container prune -f
      displayName: Clean up container
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'

- stage: Deploy
  jobs:
  - job: Job7
    displayName: Deploy Module
    condition: and(succeeded(), in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      condition: startsWith(variables['Build.SourceVersionMessage'], '!deploy')
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - powershell: . ./build.ps1 -Task Deploy
      displayName: Deploy to PowerShell Gallery
      condition: startsWith(variables['Build.SourceVersionMessage'], '!deploy')
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
        GitHubPAT: $(GitHub.PAT)
        NuGetApiKey: $(NuGetApiKey)
        TwitterAccessSecret: $(Twitter.AccessSecret)
        TwitterAccessToken: $(Twitter.AccessToken)
        TwitterConsumerKey: $(Twitter.ConsumerKey)
        TwitterConsumerSecret: $(Twitter.ConsumerSecret)

- stage: Docs
  jobs:
  - job: Job8
    displayName: Deploy Docs
    condition: and(succeeded(), ne('${{ parameters.MkDocs }}', ''), ne('${{ parameters.GitUrl }}', ''), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      name: Hosted VS2017

    steps:
    - checkout: self
      submodules: recursive
      persistCredentials: true

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - task: DownloadSecureFile@1
      inputs:
        secureFile: deploy_key
      displayName: 'Download Deploy Key'


    - powershell: |
        choco install openssh -y
        choco install git -y
      displayName: Install Git & OpenSSH

    - powershell: |
        git config --local user.name "Azure Pipelines"
        git config --local user.email "azuredevops@microsoft.com"
        New-Item ~/.ssh -ItemType Directory -Verbose
        Move-Item -Path $env:DOWNLOADSECUREFILE_SECUREFILEPATH -Destination ~/.ssh -Verbose
        Rename-Item ~/.ssh/deploy_key -NewName id_rsa -Verbose
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
        git remote set-url origin ${{ parameters.GitUrl }}
      displayName: Configure Git

    - powershell: . ./build.ps1 -Task Docs
      displayName: Build and Deploy Docs
      env:
        GitHubPAT: $(GitHub.PAT)

parameters:
  - name: MkDocs
    default: ''
  - name: GitUrl
    default: ''
  - name: BuildReleasePoolName
    default: 'Hosted VS2017'

stages:
- stage: Build
  displayName: Build Module
  dependsOn: []
  jobs:
  - job: Job1
    displayName: Build Module
    pool:
      name: '${{ parameters.BuildReleasePoolName }}'

    steps:
    - checkout: self
      submodules: recursive

    - powershell: . ./build.ps1
      displayName: Build Module

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Built Module'
      inputs:
        PathtoPublish: BuildOutput
        ArtifactName: BuildOutput

- stage: Test_Windows_PSv5
  displayName: Test Windows (PSv5)
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/beta'), ne(variables['Build.SourceBranch'], 'refs/heads/alpha'))
  dependsOn:
    - Build
  jobs:
  - job: Job2
    displayName: Test Windows (PSv5)
    condition: succeeded()
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - powershell: . ./build.ps1 -Task Test
      displayName: Test Module
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))

- stage: Test_Ubuntu
  displayName: Test Ubuntu (latest)
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/beta'), ne(variables['Build.SourceBranch'], 'refs/heads/alpha'))
  dependsOn:
    - Build
  jobs:
  - job: Job3
    displayName: Test Ubuntu
    condition: succeeded()
    pool:
      name: Hosted Ubuntu 1604

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))

- stage: Test_macOS
  displayName: Test macOS (latest)
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/beta'), ne(variables['Build.SourceBranch'], 'refs/heads/alpha'))
  dependsOn:
    - Build
  jobs:
  - job: Job4
    displayName: Test macOS
    condition: succeeded()
    pool:
      name: Hosted macOS

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))

- stage: Test_Windows_PSv6
  displayName: Test Windows (PSv6)
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/beta'), ne(variables['Build.SourceBranch'], 'refs/heads/alpha'))
  dependsOn:
    - Build
  jobs:
  - job: Job5
    displayName: Test Windows (PSv6)
    condition: succeeded()
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - pwsh: . ./build.ps1 -Task Test
      displayName: Test Module
      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/Test*.xml'
      inputs:
        testRunner: NUnit
        testResultsFiles: '**/Test*.xml'
      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))

#- stage: Test_Docker
#  displayName: Test Docker (preview)
#  dependsOn:
#    - Build
#  condition: eq(variables['Build.SourceBranchName'], 'somethingnonexistent')
#  jobs:
#  - job: Job6
#    displayName: Test Docker (preview)
#    condition: succeeded()
#    pool:
#      name: Hosted Ubuntu 1604
#
#    steps:
#    - task: DownloadBuildArtifacts@0
#      displayName: 'Download Build Artifacts'
#      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
#      inputs:
#        artifactName: BuildOutput
#        downloadPath: '$(Build.SourcesDirectory)'
#
#    - pwsh: |
#        if (-not (Test-Path Dockerfile)) {
#            Write-Host "Pulling Dockerfile from template repo"
#            Invoke-RestMethod 'https://raw.githubusercontent.com/SCRT-HQ/AzurePipelineTemplates/master/BuildTestDeployModule/Dockerfile' | Set-Content Dockerfile -Force
#        }
#        else {
#            Write-Host "Dockerfile already exists in current repo! Contents:`n"
#            Get-Content Dockerfile
#        }
#      displayName: Create Dockerfile
#
#    - script: docker build . -t test -f Dockerfile
#      displayName: Build container image
#      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
#
#    - script: docker run --name test test
#      displayName: Test Module in Container
#      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
#
#    - script: docker cp test:/source/BuildOutput/TestResults.xml BuildOutput/TestResults.xml
#      displayName: Copy container test results
#      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
#
#    - script: docker container prune -f
#      displayName: Clean up container
#      condition: not(contains(variables['Build.SourceVersionMessage'], '!docs'))
#
#    - task: PublishTestResults@2
#      displayName: 'Publish Test Results **/Test*.xml'
#      condition: and(succeededOrFailed(), not(contains(variables['Build.SourceVersionMessage'], '!docs')))
#      inputs:
#        testRunner: NUnit
#        testResultsFiles: '**/Test*.xml'
#
- stage: Deploy
  displayName: Deploy Module
  dependsOn:
    - Build
    - Test_Windows_PSv5
    - Test_Ubuntu
    - Test_macOS
    #- Test_Docker
    - Test_Windows_PSv6
  jobs:
  - job: Job7
    displayName: Deploy Module
    condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual', 'IndividualCI', 'BatchedCI'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
    pool:
      name: Hosted VS2017

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - powershell: |
        if ($null -eq $env:BUILD_SOURCEVERSIONMESSAGE) {$env:BUILD_SOURCEVERSIONMESSAGE = (git log -1 --format=%B) -join "`n"}
        if ($env:BUILD_SOURCEVERSIONMESSAGE -match '^!deploy') {. ./build.ps1 -Task Deploy} else {Write-Host "Skipping deploy due to SourceVersionMessage not starting with '!deploy'..."; Get-ChildItem Env:\ | Where-Object {$_.Name -match 'Build'} | Format-Table Name,Value -AutoSize; "Source Version Message"; $env:BUILD_SOURCEVERSIONMESSAGE}
      displayName: Deploy to PowerShell Gallery
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
        GitHubPAT: $(GitHub.PAT)
        NuGetApiKey: $(NuGetApiKey)
        TwitterAccessSecret: $(Twitter.AccessSecret)
        TwitterAccessToken: $(Twitter.AccessToken)
        TwitterConsumerKey: $(Twitter.ConsumerKey)
        TwitterConsumerSecret: $(Twitter.ConsumerSecret)


- stage: DeployPrerelease
  displayName: Deploy Prerelease Module
  dependsOn:
    - Build
  jobs:
  - job: Job8
    displayName: Deploy Prerelease Module
    condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual', 'IndividualCI', 'BatchedCI'), or(eq(variables['Build.SourceBranch'], 'refs/heads/beta'), eq(variables['Build.SourceBranch'], 'refs/heads/alpha'), eq(variables['Build.SourceBranch'], 'refs/heads/rc')))
    pool:
      name: '${{ parameters.BuildReleasePoolName }}'

    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - powershell: |
        . ./build.ps1 -Task Deploy
      displayName: Deploy Prerelease to PowerShell Gallery
      env:
        PSGSuiteConfigJson: '$(PSGSuiteConfigJson)'
        GitHubPAT: $(GitHub.PAT)
        NuGetApiKey: $(NuGetApiKey)
        TwitterAccessSecret: $(Twitter.AccessSecret)
        TwitterAccessToken: $(Twitter.AccessToken)
        TwitterConsumerKey: $(Twitter.ConsumerKey)
        TwitterConsumerSecret: $(Twitter.ConsumerSecret)

- stage: Docs
  displayName: Build/Deploy Docs
  dependsOn:
    - Build
    - Test_Windows_PSv5
    - Test_Ubuntu
    - Test_macOS
    #- Test_Docker
    - Test_Windows_PSv6
  jobs:
  - job: Job9
    displayName: Build/Deploy Docs
    condition: and(succeeded(), ne('${{ parameters.MkDocs }}', ''), ne('${{ parameters.GitUrl }}', ''), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/beta'), eq(variables['Build.SourceBranch'], 'refs/heads/alpha'), eq(variables['Build.SourceBranch'], 'refs/heads/rc')))
    pool:
      name: Hosted Ubuntu 1604

    steps:
    - checkout: self
      submodules: recursive
      persistCredentials: true

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: BuildOutput
        downloadPath: '$(Build.SourcesDirectory)'

    - task: DownloadSecureFile@1
      inputs:
        secureFile: deploy_key
      displayName: 'Download Deploy Key'

    - script: |
        git config --local user.name "Azure Pipelines"
        git config --local user.email "azuredevops@microsoft.com"
        mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
        chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
        git remote set-url origin ${{ parameters.GitUrl }}
      displayName: Configure Git

    - powershell: . ./build.ps1 -Task Docs
      displayName: Build and Deploy Docs
      env:
        GitHubPAT: $(GitHub.PAT)
